install.packages(swirl)
install.packages("swirl")
library("swirl")
swirl()
?InstallCourses
install_course(Dates and Times with lubridate)
install_course(course_name = Dates and Times with lubridate)
install_from_swirl("Dates and Times with lubridate")
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale()
Sys.getlocale(LC_TIME)
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
print(this_day)
print(year(this_day))
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
print(this_moment)
hour(this_moment)
my_date <- ymd("1989-05-17")
print(my_date)
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25051985)
dmy(25081985)
ymd("192012")
ymd("19200102")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
upate(this_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 39)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
with_tz
with_tz(arrive)
info()
with_tz(arrive, tzone="Hong Kong")
with_tz(arrive, tzone="GMT")
with_tz(arrive, tzone="UTC + 8")
with_tz(arrive, tzone="China/Hong_Kong")
with_tz(arrive, "GMT")
info()
skip()
with_tz(arrive, "Asia/Hong_Kong")
skip()
arrive
mdy("June 17, 2008")
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 20087", tz ="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
interval()
interval(arrive, last_time)
?interval()
interval(%arrive--last_time%)
interval(arrive, last_time)
interval(arrive %--% last_time)
skip()
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
exit()
install.packages("data.table")
install.packages("dataframes2xls")
install.packages("csv")
install.packages("csvread")
install.packages("sqldf")
install.packages("RMySQL")
install.packages("XML")
install.packages("xlsx")
install.packages("plyr")
install.packages("Hmisc")
install.packages("reshape2")
install.packages("dplyr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
unzip(zipfile="./coursera/Dataset.zip",exdir="./coursera")
unzip(zipfile="./Coursera/Dataset.zip",exdir="./Coursera")
unz(zipfile="./Coursera/Dataset.zip",exdir="./Coursera")
if(!file.exists("./Coursera")){dir.create("./Coursera")}
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames))
#download and unzip data sets
if(!file.exists("./Coursera")){dir.create("./Coursera")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./Coursera/Dataset.zip")
# Unzip dataSet to /data directory
unzip(zipfile="./Coursera/Dataset.zip",exdir="./Coursera")
# Reading trainings tables:
x_train <- read.table("./Coursera/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./Coursera/UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./Coursera/UCI HAR Dataset/train/subject_train.txt")
# Reading testing tables:
x_test <- read.table("./Coursera/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./Coursera/UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./Coursera/UCI HAR Dataset/test/subject_test.txt")
# Reading feature vector:
features <- read.table('./Cousera/UCI HAR Dataset/features.txt')
# Reading activity labels:
activityLabels = read.table('./Cousera/UCI HAR Dataset/activity_labels.txt')
#assign column names
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#merge all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
#read column names
colNames <- colnames(setAllInOne)
#create vector for defining ID, mean and standard deviation
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames))
#make a subset
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
#name all activities with descriptive names
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by='activityId',
all.x=TRUE)
#make a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#write second data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
#download and unzip data sets
if(!file.exists("./Coursera")){dir.create("./Coursera")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./Coursera/Dataset.zip")
# Unzip dataSet to /data directory
unzip(zipfile="./Coursera/Dataset.zip",exdir="./Coursera")
# Reading trainings tables:
x_train <- read.table("C://Users/chenxi68/Documents/Coursera/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("C://Users/chenxi68/Documents/Coursera/UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("C://Users/chenxi68/Documents/Coursera/UCI HAR Dataset/train/subject_train.txt")
# Reading testing tables:
x_test <- read.table("C://Users/chenxi68/Documents/Coursera/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("C://Users/chenxi68/Documents/Coursera/UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("C://Users/chenxi68/Documents/Coursera/UCI HAR Dataset/test/subject_test.txt")
# Reading feature vector:
features <- read.table('C://Users/chenxi68/Documents/Cousera/UCI HAR Dataset/features.txt')
# Reading activity labels:
activityLabels = read.table('C://Users/chenxi68/Documents/Cousera/UCI HAR Dataset/activity_labels.txt')
#assign column names
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#merge all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
#read column names
colNames <- colnames(setAllInOne)
#create vector for defining ID, mean and standard deviation
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames))
#make a subset
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
#name all activities with descriptive names
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by='activityId',
all.x=TRUE)
#make a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#write second data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
# Reading trainings tables:
x_train <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\X_train.txt")
y_train <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\y_train.txt")
subject_train <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\subject_train.txt")
# Reading testing tables:
x_test <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\test\X_test.txt")
y_test <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\test\y_test.txt")
subject_test <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\test\subject_test.txt")
# Reading feature vector:
features <- read.table('C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\features.txt')
# Reading activity labels:
activityLabels = read.table('C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\activity_labels.txt')
# Reading trainings tables:
x_train <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\X_train.txt")
y_train <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\y_train.txt")
subject_train <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\subject_train.txt")
# Reading testing tables:
x_test <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\test\X_test.txt")
y_test <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\test\y_test.txt")
subject_test <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\test\subject_test.txt")
# Reading feature vector:
features <- read.table('C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\features.txt')
# Reading activity labels:
activityLabels = read.table('C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\activity_labels.txt')
# Reading trainings tables:
x_train <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\X_train.txt")
y_train <- read.table("C:\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\y_train.txt")
x_train <- read.table("C:\\Users\1_XiChen\Documents\Coursera\UCI HAR Dataset\train\X_train.txt")
#download and unzip data sets
if(!file.exists("./Desktop")){dir.create("./Desktop")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./Desktop/Dataset.zip")
# Unzip dataSet to /data directory
unzip(zipfile="./Desktop/Dataset.zip",exdir="./Desktop")
# Reading trainings tables:
x_train <- read.table("C:\\Desktop\UCI HAR Dataset\train\X_train.txt")
y_train <- read.table("C:\\Desktop\UCI HAR Dataset\train\y_train.txt")
subject_train <- read.table("C:\\Desktop\UCI HAR Dataset\train\subject_train.txt")
# Reading testing tables:
x_test <- read.table("C:\\Desktop\UCI HAR Dataset\test\X_test.txt")
y_test <- read.table("C:\\Desktop\UCI HAR Dataset\test\y_test.txt")
subject_test <- read.table("C:\\Desktop\UCI HAR Dataset\test\subject_test.txt")
# Reading feature vector:
features <- read.table("C:\\Desktop\UCI HAR Dataset\features.txt")
# Reading activity labels:
activityLabels = read.table("C:\\Desktop\UCI HAR Dataset\activity_labels.txt")
#assign column names
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#merge all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
#read column names
colNames <- colnames(setAllInOne)
#create vector for defining ID, mean and standard deviation
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames))
#make a subset
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
#name all activities with descriptive names
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by='activityId',
all.x=TRUE)
#make a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#write second data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
x_train <- read.table("C:\\Desktop\UCI HAR Dataset\train\X_train.txt")
y_train <- read.table("C:\\Desktop\UCI HAR Dataset\train\y_train.txt")
subject_train <- read.table("C:\\Desktop\UCI HAR Dataset\train\subject_train.txt")
features <- read.table("C:\\Desktop\UCI HAR Dataset\features.txt")
x_train <- read.table("./DesktopUCI HAR Dataset/train/X_train.txt")
x_train <- read.table("./Desktop/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./Desktop/UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./Desktop/UCI HAR Datasettrain/subject_train.txt")
# Reading testing tables:
x_test <- read.table("./Desktop/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./Desktop/UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./Desktop/UCI HAR Dataset/test/subject_test.txt")
# Reading feature vector:
features <- read.table("./Desktop/UCI HAR Dataset/features.txt")
# Reading activity labels:
activityLabels = read.table("./Desktop/UCI HAR Dataset/activity_labels.txt")
subject_train <- read.table("./Desktop/UCI HAR Dataset/train/subject_train.txt")
x_train <- read.table("./Desktop/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("./Desktop/UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("./Desktop/UCI HAR Dataset/train/subject_train.txt")
# Reading testing tables:
x_test <- read.table("./Desktop/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("./Desktop/UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("./Desktop/UCI HAR Dataset/test/subject_test.txt")
# Reading feature vector:
features <- read.table("./Desktop/UCI HAR Dataset/features.txt")
# Reading activity labels:
activityLabels = read.table("./Desktop/UCI HAR Dataset/activity_labels.txt")
#assign column names
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#merge all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
#read column names
colNames <- colnames(setAllInOne)
#create vector for defining ID, mean and standard deviation
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames))
#make a subset
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
#name all activities with descriptive names
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by='activityId',
all.x=TRUE)
#make a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#write second data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
getwd()
#assign column names
colnames(x_train) <- features[,2]
colnames(y_train) <-"activityId"
colnames(subject_train) <- "subjectId"
colnames(x_test) <- features[,2]
colnames(y_test) <- "activityId"
colnames(subject_test) <- "subjectId"
colnames(activityLabels) <- c('activityId','activityType')
#merge all data
mrg_train <- cbind(y_train, subject_train, x_train)
mrg_test <- cbind(y_test, subject_test, x_test)
setAllInOne <- rbind(mrg_train, mrg_test)
#read column names
colNames <- colnames(setAllInOne)
#create vector for defining ID, mean and standard deviation
mean_and_std <- (grepl("activityId" , colNames) |
grepl("subjectId" , colNames) |
grepl("mean.." , colNames) |
grepl("std.." , colNames))
#make a subset
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
setForMeanAndStd
#name all activities with descriptive names
setWithActivityNames <- merge(setForMeanAndStd, activityLabels,
by='activityId',
all.x=TRUE)
#make a second tidy data set
secTidySet <- aggregate(. ~subjectId + activityId, setWithActivityNames, mean)
secTidySet <- secTidySet[order(secTidySet$subjectId, secTidySet$activityId),]
#write second data set in txt file
write.table(secTidySet, "secTidySet.txt", row.name=FALSE)
setForMeanAndStd <- setAllInOne[ , mean_and_std == TRUE]
write.table(setForMeanAndStd, "tidydataset.txt", row.names = FALSE)
